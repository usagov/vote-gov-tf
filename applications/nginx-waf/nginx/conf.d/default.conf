map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

map $request_uri $error_page {
  default /404/index.html;
  ~/(?<lang>[a-z][a-z]?[a-z]|zh-hans)/(.*) /$lang/404/index.html;
}

geo $allow_ips {
  default deny;
  include nginx/snippets/allowed-ips.conf;
}

server {
    server_name _;
    listen $VCAP_APP_PORT;
    include nginx/snippets/tls-settings.conf;

    modsecurity on;
    modsecurity_rules_file /home/vcap/app/nginx/snippets/owasp-modsecurity-main.conf;

    if ($allow_ips = deny) {
      set $port 8884;
      break;
    }

    set $cf_forwarded_host "$host";
    #if ($http_x_cf_forwarded_url ~* ^(https?\:\/\/)(.*?)(\/(.*))?$) {
    #    set $cf_forwarded_host "$2";
    #}

    set $port 8881;
    if ($cf_forwarded_host ~* ^cms) {
      set $port 8882;
    }

    location @fourohfour_english {
      allow all;
      access_log off;

      rewrite ^ /404/index.html;
      include nginx/snippets/proxy-to-static.conf;
      break;
    }

    location ^~ /s3/files {
      set $port 8883;
      proxy_redirect off;
      proxy_connect_timeout 300;
      chunked_transfer_encoding off;
      proxy_pass http://127.0.0.1:$port;
      proxy_cookie_flags ~SESS.* secure;
      proxy_set_header Host $cf_forwarded_host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Real-IP $remote_addr;
      error_page 403 = @fourohfour_english;
    }

    location / {
      proxy_redirect off;
      proxy_connect_timeout 300;
      chunked_transfer_encoding off;
      proxy_pass http://127.0.0.1:$port;
      proxy_cookie_flags ~SESS.* secure;
      proxy_set_header Host $cf_forwarded_host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Real-IP $remote_addr;
      error_page 403 = @fourohfour_english;
    }
}

server {
  server_name 127.0.0.1;
  listen 8881;

  location @fourohfour {
    allow all;
    access_log off;

    rewrite ^ $error_page;
    include nginx/snippets/proxy-to-static.conf;
  }

  location / {
    #rewrite ^/static/(.*) /$1;
    rewrite ^([^.]*[^/])$ $1/;
    rewrite (.*)/$ $1/index.html last;

    include nginx/snippets/proxy-to-static.conf;
    error_page 403 = @fourohfour;
  }
}

server {
  server_name 127.0.0.1;
  listen 8882;

  location @rewrite {
    rewrite ^ /index.php;
    include nginx/snippets/proxy-to-app.conf;
  }

  #Required by Drupal/S3FS Module
  #Proxy request for image styles to CMS
  location ~ /s3/files/styles/ {
    try_files $uri @rewrite;
    include nginx/snippets/proxy-to-app.conf;
  }

  location / {
    access_log on;
    rewrite_log on;
    include nginx/snippets/proxy-to-app.conf;
  }
}

server {
  server_name 127.0.0.1;
  listen 8883;

  #Rewrite all s3 file requests to cms path.
  #Location blocks below will handle the rest.
  rewrite ^/s3/files/(.*)$ /cms/public/$1 break;

  location @fourohfour {
    allow all;
    access_log off;

    rewrite ^ $error_page;
    include nginx/snippets/proxy-to-static.conf;
  }

  location @cmsimagestylerewrite {
    #Setting $cf_fowarded_host within the location block
    #oppose to outside makes it available to the conditional
    #check below.
    set $cf_forwarded_host "$host";
    #If the forwarding host is not from the CMS then return a 403 page.
    if ($cf_forwarded_host !~* ^cms) {
      error_page 403 = @fourohfour;
      return 403;
    }

    #Let's forward the request to the CMS to allow it to handle processing any
    #image styles.
    set $port 8882;
    proxy_redirect off;
    proxy_connect_timeout 300;
    chunked_transfer_encoding off;
    #Add the original $request_uri to ensure it registers with the
    #CMS defined controller in the s3fs module.
    proxy_pass http://127.0.0.1:$port$request_uri;
    proxy_cookie_flags ~SESS.* secure;
    proxy_set_header Host $cf_forwarded_host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Real-IP $remote_addr;
    error_page 403 = @fourohfour;
  }

  #Try to serve up any available image styles
  #directly from the S3 bucket.
  location ~ /cms/public/styles/ {
    include nginx/snippets/proxy-to-storage.conf;
    #Redirect 403 errors to the specified location block
    #for further handling. Using try_files for S3 just didn't
    #work out.
    error_page 403 = @cmsimagestylerewrite;
  }

  location / {
    include nginx/snippets/proxy-to-storage.conf;
    error_page 403 = @fourohfour;
  }
}

# 403 forbidden only page
server {
  server_name 127.0.0.1;
  listen 8884;

  location /forbidden {
    allow all;
    access_log off;

    default_type text/plain;
    return 403 'Forbidden by VoteGov';
    break;
  }

  location / {
    allow all;
    access_log off;

    rewrite ^ /forbidden last;
  }
}
